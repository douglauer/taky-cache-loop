// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var CacheLoop, cache, every, log, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  log = function(x) {
    try {
      return console.log(x);
    } catch (_error) {}
  };

  _ = require('lodash');

  every = require('every-time');

  cache = require('memory-cache');

  module.exports = CacheLoop = (function() {
    CacheLoop.prototype.fn = false;

    CacheLoop.prototype.key = 'key';

    CacheLoop.prototype.prefix = 'cachel';

    CacheLoop.prototype.interval = '1 min';

    function CacheLoop(obj) {
      var k, v;
      this.obj = obj;
      this.force = __bind(this.force, this);
      for (k in obj) {
        v = obj[k];
        this[k] = v;
      }
      if (this.use) {
        this.fn = this.use;
      }
      if (this.refresh) {
        this.fn = this.refresh;
      }
      if (this.callback) {
        this.fn = this.callback;
      }
      if (this.every) {
        this.interval = this.every;
      }
      if (!this.fn) {
        throw new Error('You must provide a function value');
      }
      if (!this.interval) {
        throw new Error('You must provide an interval for cache refresh');
      }
      this._cycle();
      every(this.interval, (function(_this) {
        return function() {
          return _this._cycle();
        };
      })(this));
    }

    CacheLoop.prototype.force = function() {
      return this._cycle();
    };

    CacheLoop.prototype.read = function() {
      var hit, _ref;
      if (hit = cache.get(((_ref = this.prefix) != null ? _ref : 'cachel') + (":" + this.key))) {
        return hit;
      } else {
        return null;
      }
    };

    CacheLoop.prototype.val = function() {
      return this.read();
    };

    CacheLoop.prototype.value = function() {
      return this.read();
    };

    CacheLoop.prototype._cycle = function() {
      if (this._type(this.fn) === 'function') {
        return this.fn((function(_this) {
          return function(e, r) {
            var _ref;
            if (!e) {
              return cache.put(((_ref = _this.prefix) != null ? _ref : 'cachel') + (":" + _this.key), r);
            } else {

            }
          };
        })(this));
      }
    };

    CacheLoop.prototype._type = function(obj) {
      if (obj === 'undefined' || obj === null) {
        return false;
      }
      return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
    };

    return CacheLoop;

  })();


  /*
  c = new CacheLoop {
    fn: ((cb) ->
      cb null, new Date().getTime()
    )
    interval: '5 seconds'
  }
  
  every '1s', -> log c.read()
  
  1406767835607
  1406767835607
  1406767835607
  1406767835607
  1406767835607
  1406767840608
  1406767840608
  1406767840608
  1406767840608
  1406767840608
  1406767845609
  1406767845609
   */

}).call(this);
